EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
ProjectTwo.com -- emu8086 assembler version: 4.08  
 
[ 12/20/2017  --  6:56:12 AM ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       
[   2]        :                                       ; You may customize this and other start-up templates;
[   3]        :                                       ; The location of this template is c:\emu8086\inc\0_com_template.txt
[   4]        :                                       
[   5]        :                                       
[   6]        :                                       ;JOHN ARENA - COMPUTER ASSEMBLY- PROJECT 2 - 2:00-3:15PM. LAST 4 ID: 9781 - PROJECT 2 DUE 12/19/17 or EARLY 12/20/17 MORNING
[   7]        :                                       org 100h
[   8]        :                                       
[   9]    0100: E9 06 11                              jmp start
[  10]        :                                       
[  11]    0103: 00 00                                 inHandle dw ?
[  12]    0105: 00 00                                 charAmount dw ?
[  13]    0107: 00 00 00 00 00 00 00 00 00 00 00 00   buff db 4000 dup (?)
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00                         
[  14]    10A7: 02                                    startY db 2
[  15]    10A8: 00                                    startX db 0
[  16]    10A9: 00 00                                 newAddr dw ?
[  17]    10AB: 00 00                                 newLineCount dw 0
[  18]    10AD: 46 32 3A 20 53 77 69 74 63 68 20 4D   commandString db "F2: Switch Modes(Insert/Overtype) || F3: Encrypt || F5: Save || F10: Font Color"
                6F 64 65 73 28 49 6E 73 65 72 74 2F 
                4F 76 65 72 74 79 70 65 29 20 7C 7C 
                20 46 33 3A 20 45 6E 63 72 79 70 74 
                20 7C 7C 20 46 35 3A 20 53 61 76 65 
                20 7C 7C 20 46 31 30 3A 20 46 6F 6E 
                74 20 43 6F 6C 6F 72                
[  19]    10FC: 4E 6F 74 20 53 61 76 65 64 3A 20 58   savedStringOne db "Not Saved: X"
                                                    
[  20]    1108: 53 61 76 65 64 3A 20 20 20 20 20 20   savedStringTwo db "Saved:      "
                                                    
[  21]    1114: 7C 7C 20 46 69 6C 65 6E 61 6D 65 3A   fileNameString db "|| Filename: test.txt "
                20 74 65 73 74 2E 74 78 74 20       
[  22]    112A: 7C 7C 20 4D 6F 64 65 3A 20 4F 76 65   modeOverTypeString db "|| Mode: Overtype "
                72 74 79 70 65 20                   
[  23]    113C: 7C 7C 20 4D 6F 64 65 3A 20 49 6E 73   modeInsertString db "|| Mode: Insert    "
                65 72 74 20 20 20 20                
[  24]    114F: 43 4F 4C 4F 52 3A 42 6C 61 63 6B      colorString db "COLOR:Black"
[  25]    115A: 14                                    fileName db 20
[  26]    115B: 02 00                                 distIndex dw 2
[  27]    115D: 00 00 00 00 00 00 00 00 00 00 00 00   distArray db 100 dup (0)
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00                         
[  28]    11C1: 00                                    distCount db 0
[  29]    11C2: 00                                    lineLen db 0
[  30]    11C3: 00 00                                 buffLoc dw 0
[  31]    11C5: 00                                    asciiCode db 0
[  32]    11C6: 00 00                                 newX dw ?
[  33]    11C8: 00 00                                 newY dw ?
[  34]    11CA: 00                                    encrX db 0
[  35]    11CB: 02                                    encrY db 2
[  36]    11CC: F0 00 F1 00 F2 00 F3 00 F4 00 F5 00   colorArray dw 00f0h,00f1h,00f2h,00f3h,00f4h,00f5h,00f6h
                F6 00                               
[  37]    11DA: 42 6C 61 63 6B 20 42 6C 75 65 20 20   colorArrayString db "Black Blue  Green Aqua  Red   PurpleYellow"
                47 72 65 65 6E 20 41 71 75 61 20 20 
                52 65 64 20 20 20 50 75 72 70 6C 65 
                59 65 6C 6C 6F 77                   
[  38]    1204: 06 00                                 colorIndex dw 6
[  39]    1206: F0 00                                 color dw 0f0h
[  40]    1208: 00                                    colIndex db 0
[  41]        :                                       
[  42]    1209:                                       start:
[  43]    1209: 8C C8                                 mov ax, @data
[  44]    120B: 8E D8                                 mov ds, ax
[  45]        :                                       
[  46]    120D: B8 00 B8                              mov ax, 0B800h
[  47]    1210: 8E C0                                 mov es, ax
[  48]        :                                       
[  49]    1212: B8 03 00                              mov ax, 0003h           ; Size of 80x25(al=03, ah=00)
[  50]    1215: CD 10                                 int 10h
[  51]        :                                       
[  52]        :                                       ;    xor di, di              ; vid mem offset 0
[  53]        :                                       ;    mov ax, 02f00h + ' '    ; green background, white foreground
[  54]        :                                       ;    mov cx, 80*25           ; This amount is stored in cx. Cx counts down for instruction below
[  55]        :                                       ;    rep stosw
[  56]        :                                       
[  57]    1217: 33 FF                                 xor di, di              ; offset 0
[  58]    1219: B8 20 9F                              mov ax, 09f00h + ' '    ; Blue on white
[  59]    121C: B9 50 00                              mov cx, 80              ;  80
[  60]    121F: F3 AB                                 rep stosw
[  61]        :                                       
[  62]    1221: BF A0 00                              mov di, 160
[  63]    1224: B8 2D 90                              mov ax, 09000h + '-'   ; Blue on white with line
[  64]    1227: B9 50 00                              mov cx, 80
[  65]    122A: F3 AB                                 rep stosw
[  66]        :                                       
[  67]    122C: BF 40 01                              mov di, 320
[  68]    122F: B8 20 F0                              mov ax, 0f000h + ' '   ;Black letters, white background
[  69]    1232: B9 90 06                              mov cx, 80*21
[  70]    1235: F3 AB                                 rep stosw
[  71]        :                                       
[  72]    1237: BF 60 0E                              mov di, 3680
[  73]    123A: B8 2D 8F                              mov ax, 8F00h + '-'    ; Gray on white, dashes
[  74]    123D: B9 50 00                              mov cx, 80
[  75]    1240: F3 AB                                 rep stosw
[  76]        :                                       
[  77]    1242: BF 00 0F                              mov di, 3840
[  78]    1245: B8 20 8F                              mov ax, 8F00h + ' '    ; Gray on white
[  79]    1248: B9 50 00                              mov cx, 80
[  80]    124B: F3 AB                                 rep stosw
[  81]        :                                       ;
[  82]    124D: BB 00 00                              mov bx, 0
[  83]    1250: 33 F6                                 xor si, si
[  84]    1252:                                       commandDraw:                             ; Draws Command Description String
[  85]    1252: 8A 84 AD 10                           mov al, commandString[si]
[  86]    1256: 26 88 07                              mov byte ptr es: [bx], al
[  87]    1259: 83 C3 02                              add bx, 2
[  88]    125C: 46                                    inc si
[  89]    125D: 83 FE 4F                              cmp si, 79                           ; Width
[  90]    1260: 7C F0                                 jl commandDraw
[  91]        :                                       
[  92]    1262: BB 00 0F                              mov bx, 3840
[  93]    1265: 33 F6                                 xor si, si
[  94]    1267:                                       drawSave:                                ; Draws Save status at start
[  95]    1267: 8A 84 FC 10                           mov al, savedStringOne[si]
[  96]    126B: 26 88 07                              mov byte ptr es: [bx], al
[  97]    126E: 83 C3 02                              add bx, 2
[  98]    1271: 46                                    inc si
[  99]    1272: 83 FE 0C                              cmp si, 12
[ 100]    1275: 7C F0                                 jl drawSave
[ 101]        :                                       
[ 102]    1277: BB 1A 0F                              mov bx, 3866
[ 103]    127A: 33 F6                                 xor si, si
[ 104]    127C:                                       drawFileNameString:                      ; Draws file name
[ 105]    127C: 8A 84 14 11                           mov al, fileNameString[si]
[ 106]    1280: 26 88 07                              mov byte ptr es:[bx], al
[ 107]    1283: 83 C3 02                              add bx, 2
[ 108]    1286: 46                                    inc si
[ 109]    1287: 83 FE 16                              cmp si, 22
[ 110]    128A: 7C F0                                 jl drawFileNameString
[ 111]        :                                       
[ 112]    128C: BB 6C 0F                              mov bx, 3948
[ 113]    128F: 33 F6                                 xor si, si                               ; Draws Color currently used for font
[ 114]    1291:                                       drawColorString:
[ 115]    1291: 8A 84 4F 11                           mov al, colorString[si]
[ 116]    1295: 26 88 07                              mov byte ptr es:[bx], al
[ 117]    1298: 83 C3 02                              add bx, 2
[ 118]    129B: 46                                    inc si
[ 119]    129C: 83 FE 0B                              cmp si, 11
[ 120]    129F: 7C F0                                 jl drawColorString
[ 121]        :                                       
[ 122]        :                                       ;    int 10h
[ 123]        :                                       
[ 124]        :                                       ;*******GET COMMAND LINE ARG*****
[ 125]    12A1: 33 DB                                 xor bx, bx               ; 0
[ 126]    12A3: 8A 1E 80 00                           mov bl, [80h]            ; length string at 80h
[ 127]    12A7: 80 FB 7E                              cmp bl, 126              ; check length
[ 128]    12AA: 76 03 E9 5D 04                        ja exit
[ 129]    12AF: C6 87 81 00 00                        mov [bx+81h], 0         ; add 0 at end of string
[ 130]        :                                       
[ 131]        :                                       ;********OPEN FILE*********
[ 132]    12B4: B4 3D                                 mov ah, 3Dh             ; Open existing file
[ 133]    12B6: B0 00                                 mov al, 0               ; Read mode
[ 134]    12B8: BA 82 00                              mov dx, 82h             ; offset of string
[ 135]    12BB: CD 21                                 int 21h                 ; Interrupt call
[ 136]    12BD: 73 03 E9 4A 04                        jc exit                  ; CF set, jmp
[ 137]    12C2: A3 03 01                              mov inHandle, ax        ; save handler
[ 138]    12C5: BB BA 00                              mov bx, 186             ; random test
[ 139]    12C8: EB 00                                 jmp continue
[ 140]        :                                       ;    mov ptr es: [bx], 14    ; sym for work
[ 141]        :                                       ;    jmp continue                ; jmp contin
[ 142]        :                                       ;    err:
[ 143]        :                                       ;    mov ptr es: [bx], 15
[ 144]        :                                       ;    jmp exit
[ 145]        :                                       
[ 146]        :                                       
[ 147]        :                                       ;**********POINTER**********
[ 148]    12CA: 90                                    continue: nop
[ 149]    12CB: B4 42                                 mov ah, 42h             ; Seek, pointer
[ 150]    12CD: 8B 1E 03 01                           mov bx, inHandle        ; Bx takes handler
[ 151]    12D1: B0 02                                 mov al, 2               ; End of file
[ 152]    12D3: B9 00 00                              mov cx, 0               ; Upper order # bytes to move
[ 153]    12D6: BA 00 00                              mov dx ,0               ; Lower order # bytes to move
[ 154]    12D9: CD 21                                 int 21h                 ; Interrupt
[ 155]    12DB: A3 05 01                              mov charAmount, ax      ; Store amount of char
[ 156]        :                                       ; AX Now has the size of the string
[ 157]    12DE: B4 42                                 mov ah, 42h              ; Seek pointer
[ 158]    12E0: 8B 1E 03 01                           mov bx, inHandle        ; Bx takes handle
[ 159]    12E4: B0 00                                 mov al, 0               ; Move back to beginning
[ 160]    12E6: B9 00 00                              mov cx, 0               ; Upper order # bytes to move
[ 161]    12E9: BA 00 00                              mov dx, 0               ; Lower order # bytes to move
[ 162]    12EC: CD 21                                 int 21h                 ; Interrupt
[ 163]        :                                       
[ 164]        :                                       
[ 165]        :                                       ;*******READ FILE**********
[ 166]        :                                       ;read file  *NOTE MAKE CONSISTENCE XOR*
[ 167]    12EE: B4 3F                                 mov ah, 3Fh             ; Read file
[ 168]    12F0: 8B 1E 03 01                           mov bx, inHandle        ; Takes handle
[ 169]    12F4: 33 C9                                 xor cx, cx
[ 170]    12F6: 8B 0E 05 01                           mov cx, charAmount
[ 171]    12FA: BA 07 01                              mov dx, offset buff
[ 172]    12FD: CD 21                                 int 21h
[ 173]        :                                       
[ 174]        :                                       ;***Close File*****
[ 175]    12FF: B4 3E                                 mov ah, 3Eh             ; Close file
[ 176]    1301: 8B 1E 03 01                           mov bx, inHandle
[ 177]    1305: CD 21                                 int 21h
[ 178]        :                                       
[ 179]    1307: B6 02                                 mov dh, 2   ;Set cursor position
[ 180]    1309: B2 00                                 mov dl, 0
[ 181]    130B: B7 00                                 mov bh, 0
[ 182]    130D: B4 02                                 mov ah, 02h
[ 183]    130F: CD 10                                 int 10h     ; Interrupt
[ 184]        :                                       
[ 185]        :                                       ;********************DRAW TEXT TO SCREEN**********************
[ 186]        :                                       ;mov bx, 320                 ; start at OB800h:0320 on video memory
[ 187]    1311: 33 F6                                 xor si, si                  ; Zero out si, si, will use as the buffer index
[ 188]    1313:                                       loopDraw:
[ 189]        :                                       ;        mov ax, 0B800h
[ 190]        :                                       ;        mov es, ax
[ 191]    1313: 33 C0                                 xor ax, ax
[ 192]    1315: 8A 84 07 01                           mov al, buff[si]        ; set al to the value at the index in buffer array
[ 193]    1319: 3C 0A                                 cmp al, 10              ; Compare if there's a new line ascii code
[ 194]    131B: 74 28                                 je newLine              ; If so, jump to newLine to take care of it
[ 195]    131D: B4 09                                 mov ah, 09h             ; Write character
[ 196]    131F: B7 00                                 mov bh, 0
[ 197]    1321: 8A 1E 06 12                           mov bl, b.color
[ 198]    1325: B9 01 00                              mov cx, 1
[ 199]    1328: CD 10                                 int 10h                 ; Interrupt
[ 200]    132A: 46                                    inc si                  ; Increment index
[ 201]    132B: FE 06 C2 11                           inc lineLen             ; line length
[ 202]    132F: FE 06 A8 10                           inc startX              ; X+1
[ 203]    1333: B4 02                                 mov ah, 02h             ; Move cursor
[ 204]    1335: 8A 16 A8 10                           mov dl, startX          ;
[ 205]    1339: B7 00                                 mov bh, 0
[ 206]    133B: CD 10                                 int 10h                 ; Interrupt
[ 207]    133D: 3B 36 05 01                           cmp si, charAmount      ; Compare the index to the amount of characters in the array
[ 208]    1341: 7E D0                                 jle loopDraw            ; If we haven't gone through all the characters, loop back
[ 209]    1343: 7F 38                                 jnle scanForInput       ; Otherwise jump to avoid the newLine function below
[ 210]        :                                       
[ 211]        :                                       
[ 212]        :                                       ;*********************TAKES CARE OF NEW LINE SCENARIO*****************
[ 213]    1345:                                       newLine:
[ 214]        :                                       ;********The formula for address on screen is address=2*((80*y)+x),
[ 215]        :                                       ;but x is always 0 since it's the start of a new line, so I neglect
[ 216]        :                                       ;the adding x part since its redundant***************
[ 217]        :                                       
[ 218]    1345: 33 C0                                 xor ax, ax              ; Zero out ax so we don't cause unforseen errors
[ 219]    1347: 33 DB                                 xor bx, bx              ; Zero out bx so we don't cause unforseen errors
[ 220]    1349: 33 C9                                 xor cx, cx
[ 221]    134B: 8B 3E 5B 11                           mov di, distIndex
[ 222]    134F: FE 06 C2 11                           inc lineLen
[ 223]    1353: 8A 0E C2 11                           mov cl, lineLen
[ 224]    1357: 88 8D 5D 11                           mov distArray[di], cl
[ 225]    135B: FF 06 5B 11                           inc distIndex           ; Incremenet
[ 226]    135F: FE 06 A7 10                           inc startY              ; Next row on screen (y=rows, x=columns)
[ 227]    1363: FF 06 AB 10                           inc newLineCount        ; Increment new line count
[ 228]    1367: 46                                    inc si
[ 229]    1368: C6 06 A8 10 00                        mov startX, 0
[ 230]    136D: B4 02                                 mov ah, 02h
[ 231]    136F: 8A 36 A7 10                           mov dh, startY
[ 232]    1373: 8A 16 A8 10                           mov dl, startX
[ 233]    1377: B7 00                                 mov bh, 0
[ 234]    1379: CD 10                                 int 10h
[ 235]    137B: EB 96                                 jmp loopDraw            ; Jump back to loopDraw
[ 236]        :                                       
[ 237]        :                                       
[ 238]    137D:                                       scanForInput:
[ 239]        :                                       ;call getCursorPosition
[ 240]    137D: B4 00                                 mov ah, 00h             ; Keyboard shift flags
[ 241]    137F: CD 16                                 int 16h                 ; Interrupt
[ 242]    1381: 80 FC 48                              cmp ah, 72              ; Check if keystroke equal to BIOS scan code for UP key-
[ 243]    1384: 74 3D                                 je keyUp                ; if equal, jump to keyUp
[ 244]    1386: 80 FC 50                              cmp ah, 80              ; Check equal to BIOS scan code for DOWN key
[ 245]    1389: 74 48                                 je keyDown              ; equal than jump to keyDown
[ 246]    138B: 80 FC 4B                              cmp ah, 75              ; Check equal to BIOS scan code for LEFT key
[ 247]    138E: 74 53                                 je keyLeft              ; equal than jump to keyLeft
[ 248]    1390: 80 FC 4D                              cmp ah, 77              ; Check equal to BIOS scan code for RIGHT key
[ 249]    1393: 74 5E                                 je keyRight             ; equal than jump to keyRight
[ 250]    1395: 3C 20                                 cmp al, 32
[ 251]    1397: 7D 6B                                 jge overType
[ 252]    1399: 80 FC 53                              cmp ah, 83              ; Check equal to BIOS scan code for DEL key
[ 253]    139C: 75 03 E9 AD 00                        je delChar              ; equal than jump to delChar
[ 254]    13A1: 80 FC 3C                              cmp ah, 60              ; F2 key
[ 255]    13A4: 75 03 E9 EC 00                        je insertText           ; equal jump to insertTextMode
[ 256]    13A9: 80 FC 3D                              cmp ah, 61              ; F3 Key
[ 257]    13AC: 75 03 E9 F1 01                        je startEncrypt         ; start encrypt function
[ 258]    13B1: 80 FC 3F                              cmp ah, 63              ; F5 Key
[ 259]    13B4: 75 03 E9 02 03                        je saveFile             ; save file function
[ 260]    13B9: 80 FC 44                              cmp ah, 68              ; F10 Key
[ 261]    13BC: 75 03 E9 71 02                        je fontColor       ; back ground text function
[ 262]    13C1: EB BA                                 jmp scanForInput        ; loop back
[ 263]        :                                       
[ 264]        :                                       ;    processCtrl:
[ 265]        :                                       ;        mov ah,00h
[ 266]        :                                       ;        int 16h
[ 267]        :                                       ;        cmp ah, 105
[ 268]        :                                       ;        je testCtrl
[ 269]        :                                       
[ 270]        :                                       ;    getCursorPosition:
[ 271]        :                                       ;        mov ax, 00h                 ; Initialize mouse
[ 272]        :                                       ;        int 33h                     ; Interrupt
[ 273]        :                                       ;        mov ax, 01h                 ; Show mouse on screen
[ 274]        :                                       ;        int 33h                     ; Interrupt
[ 275]        :                                       ;        mov ax, 03h                 ; Get mouse place and status
[ 276]        :                                       ;        int 33h                     ; Interrupt
[ 277]        :                                       ;        cmp bx, 1                   ; Check left click
[ 278]        :                                       ;        jne scanForInput
[ 279]        :                                       ;        mov newX, cx
[ 280]        :                                       ;        mov newY, dx
[ 281]        :                                       ;        mov ah, 02h                 ; Set cursor
[ 282]        :                                       ;        mov dh, b.newY                ; New Y
[ 283]        :                                       ;        mov dl, b.newX                ; New X
[ 284]        :                                       ;        mov bh, 0                   ; Page number
[ 285]        :                                       ;        int 10h
[ 286]        :                                       ;        ret
[ 287]        :                                       ;
[ 288]        :                                       ;    updateMouse:
[ 289]        :                                       ;        mov ax, 03h                 ; Get mouse position and status of buttons
[ 290]        :                                       ;        int 33h                     ; Interrupt
[ 291]        :                                       ;        cmp bx, 1                   ; Check for left click
[ 292]        :                                       ;        jne scanForInput            ; No left click, ignore and jump back
[ 293]        :                                       ;        mov newX, cx                ; store the new X
[ 294]        :                                       ;        mov newY, dx                ; store the new Y
[ 295]        :                                       ;        mov dh, b.newY
[ 296]        :                                       ;        mov dl, b.newX
[ 297]        :                                       ;        mov bh, 0
[ 298]        :                                       ;        mov ah, 02h
[ 299]        :                                       ;        int 10h
[ 300]        :                                       ;        jmp scanForInput
[ 301]        :                                       
[ 302]    13C3:                                       keyUp:
[ 303]    13C3: B4 02                                 mov ah, 02h                 ; Set cursor position mode
[ 304]    13C5: B7 00                                 mov bh, 0                   ; Page number
[ 305]    13C7: 80 FE 02                              cmp dh, 2                   ; Check if cursor is at the highest it can go on board-
[ 306]    13CA: 74 B1                                 je scanForInput             ; to prevent going off screen-If it is, don't move up, jmp back
[ 307]    13CC: 80 EE 01                              sub dh, 1                   ; Otherwise, mov 1 positions "upward" (currentY-1)
[ 308]    13CF: CD 10                                 int 10h                     ; Interrupt call
[ 309]    13D1: EB AA                                 jmp scanForInput            ; Jump back to scanForInput
[ 310]    13D3:                                       keyDown:
[ 311]    13D3: B4 02                                 mov ah, 02h                 ; Set cursor position mode
[ 312]    13D5: B7 00                                 mov bh, 0                   ; Page number
[ 313]    13D7: 80 FE 16                              cmp dh, 22                  ; Check if cursor is at the lowest it can go on board-
[ 314]    13DA: 74 A1                                 je scanForInput             ; to prevent going off screen-If it is, don't move down, jmp back
[ 315]    13DC: 80 C6 01                              add dh, 1                   ; Otherwise, mov 1 positions "downward" (currentY+1)
[ 316]    13DF: CD 10                                 int 10h                     ; Interrupt call
[ 317]    13E1: EB 9A                                 jmp scanForInput            ; Jump back to scanForInput
[ 318]    13E3:                                       keyLeft:
[ 319]    13E3: B4 02                                 mov ah, 02h                 ; Set cursor position mode
[ 320]    13E5: B7 00                                 mov bh, 0                   ; Page number
[ 321]    13E7: 80 FA 00                              cmp dl, 0                   ; Check if cursor is at the left most side of the board-
[ 322]    13EA: 74 91                                 je scanForInput             ; to prevent going off screen-Ifit is, don't move left, jmp back
[ 323]    13EC: 80 EA 01                              sub dl, 1                   ; Otherwise, mov 1 positions left
[ 324]    13EF: CD 10                                 int 10h                     ; Interrupt call
[ 325]    13F1: EB 8A                                 jmp scanForInput            ; Jump back to scanForInput
[ 326]    13F3:                                       keyRight:
[ 327]    13F3: B4 02                                 mov ah, 02h                 ; Set cursor position mode
[ 328]    13F5: B7 00                                 mov bh, 0                   ; Page number
[ 329]    13F7: 80 FA 4E                              cmp dl, 78                  ; Check if cursor is at the right most side of the board-
[ 330]    13FA: 74 81                                 je scanForInput             ; to prevent going off screen-Ifit is, don't move right, jmp back
[ 331]    13FC: 80 C2 01                              add dl, 1                   ; Otherwise, mov 1 positions right
[ 332]    13FF: CD 10                                 int 10h                     ; Interrupt call
[ 333]    1401: E9 79 FF                              jmp scanForInput            ; Jump back to scanForInput
[ 334]        :                                       
[ 335]    1404:                                       overType:                        ;
[ 336]    1404: A2 C5 11                              mov asciiCode, al
[ 337]    1407: 33 DB                                 xor bx, bx
[ 338]    1409: 33 F6                                 xor si, si
[ 339]    140B: BB 00 0F                              mov bx, 3840
[ 340]    140E: E8 4D 02                              call notSavedStatus          ; Print not saved since editing currently
[ 341]    1411: 33 F6                                 xor si, si
[ 342]    1413: BB 46 0F                              mov bx, 3910
[ 343]    1416: E8 67 02                              call modeStatusOverType      ; Show mode as overtype
[ 344]    1419: E8 69 01                              call buffLocator             ; Gives buffer location
[ 345]    141C: 8B 1E C3 11                           mov bx, buffLoc
[ 346]    1420: 80 BF 07 01 0A                        cmp buff[bx], 10             ; Check if there's a CR start there
[ 347]    1425: 75 03 E9 53 FF                        je scanForInput              ; If so DO NOT override, go back
[ 348]    142A: 80 BF 07 01 0D                        cmp buff[bx], 13
[ 349]    142F: 75 03 E9 49 FF                        je scanForInput              ; Same with new line
[ 350]    1434: B4 09                                 mov ah, 09h                  ; Draw to screen
[ 351]    1436: A0 C5 11                              mov al, asciiCode
[ 352]    1439: B7 00                                 mov bh, 0
[ 353]    143B: 8A 1E 06 12                           mov bl, b.color
[ 354]    143F: B9 01 00                              mov cx, 1
[ 355]    1442: CD 10                                 int 10h
[ 356]        :                                       ;Update buffer
[ 357]    1444: 8B 1E C3 11                           mov bx, buffLoc
[ 358]    1448: 88 87 07 01                           mov buff[bx], al             ; Buffer has new character
[ 359]    144C: EB A5                                 jmp keyRight
[ 360]        :                                       
[ 361]    144E:                                       delChar:
[ 362]    144E: 33 DB                                 xor bx, bx
[ 363]    1450: 33 F6                                 xor si, si
[ 364]    1452: BB 00 0F                              mov bx, 3840
[ 365]    1455: E8 06 02                              call notSavedStatus          ; Not saved since editing
[ 366]    1458: 33 F6                                 xor si, si
[ 367]    145A: BB 46 0F                              mov bx, 3910
[ 368]    145D: E8 20 02                              call modeStatusOverType      ;Display mode
[ 369]    1460: E8 22 01                              call buffLocator
[ 370]    1463: 8B 1E C3 11                           mov bx, buffLoc
[ 371]    1467: 80 BF 07 01 0A                        cmp buff[bx], 10             ; Check if CR character
[ 372]    146C: 75 03 E9 0C FF                        je scanForInput              ; Do NOT overwrite it, go back
[ 373]    1471: 80 BF 07 01 0D                        cmp buff[bx], 13             ; Same with New Line
[ 374]    1476: 75 03 E9 02 FF                        je scanForInput
[ 375]    147B: B4 09                                 mov ah, 09h                  ; Draw to screen
[ 376]    147D: B0 00                                 mov al, 0                    ; Draws a blank since delete
[ 377]    147F: B7 00                                 mov bh, 0
[ 378]    1481: 8A 1E 06 12                           mov bl, b.color
[ 379]    1485: B9 01 00                              mov cx, 1
[ 380]    1488: CD 10                                 int 10h                      ; Interrupt
[ 381]    148A: 8B 1E C3 11                           mov bx, buffLoc
[ 382]    148E: 88 87 07 01                           mov buff[bx], al             ; Update buffer
[ 383]    1492: E9 E8 FE                              jmp scanForInput
[ 384]        :                                       
[ 385]    1495:                                       insertText:
[ 386]    1495: B4 00                                 mov ah, 00h
[ 387]    1497: CD 16                                 int 16h
[ 388]    1499: A2 C5 11                              mov asciiCode, al       ; Store ascii to use after call
[ 389]    149C: 3C 08                                 cmp al, 8
[ 390]    149E: 74 71                                 je backSpaceCase        ; If backspace during insert mode, go there
[ 391]    14A0: 33 DB                                 xor bx, bx
[ 392]    14A2: 33 F6                                 xor si, si
[ 393]    14A4: BB 00 0F                              mov bx, 3840
[ 394]    14A7: E8 B4 01                              call notSavedStatus     ; Display save status
[ 395]    14AA: 33 F6                                 xor si, si
[ 396]    14AC: BB 46 0F                              mov bx, 3910
[ 397]    14AF: E8 BD 01                              call modeStatusInsert   ; Display mode status
[ 398]    14B2: E8 D0 00                              call buffLocator        ;
[ 399]    14B5: 33 C0                                 xor ax, ax              ;
[ 400]    14B7: 33 C9                                 xor cx, cx              ;
[ 401]    14B9: BE 07 01                              lea si, buff            ; Address buff
[ 402]    14BC: 03 36 05 01                           add si, charAmount      ; Offset
[ 403]    14C0: 4E                                    dec si                  ; last letter
[ 404]    14C1: 8B 0E 05 01                           mov cx, charAmount      ; Counter
[ 405]    14C5: 8A 06 C3 11                           mov al, b.buffLoc
[ 406]    14C9: 2B C8                                 sub cx, ax
[ 407]    14CB: 49                                    dec cx
[ 408]    14CC: BF 07 01                              lea di, buff
[ 409]    14CF: 03 3E 05 01                           add di, charAmount      ; Points to where we want to move string
[ 410]    14D3: B8 00 07                              mov ax, 00700h
[ 411]    14D6: 8E C0                                 mov es, ax
[ 412]    14D8: 8E D8                                 mov ds, ax
[ 413]    14DA: FD                                    STD                     ; Direction
[ 414]    14DB: F3 A4                                 rep movsb
[ 415]        :                                       ;mov ah, 00h
[ 416]        :                                       ;int 16h
[ 417]    14DD: 33 DB                                 xor bx, bx
[ 418]    14DF: 33 C0                                 xor ax, ax
[ 419]    14E1: A0 C5 11                              mov al, asciiCode
[ 420]    14E4: 8B 1E C3 11                           mov bx, buffLoc
[ 421]    14E8: 88 87 08 01                           mov buff[bx+1], al      ; Store in buffer
[ 422]    14EC: 33 F6                                 xor si, si
[ 423]    14EE: B4 02                                 mov ah, 02h
[ 424]    14F0: B6 02                                 mov dh, 2   ;Set cursor position
[ 425]    14F2: B2 00                                 mov dl, 0
[ 426]    14F4: B7 00                                 mov bh, 0
[ 427]    14F6: CD 10                                 int 10h     ; Interrupt
[ 428]    14F8: FF 06 05 01                           inc charAmount
[ 429]    14FC: C6 06 C2 11 00                        mov lineLen, 0
[ 430]    1501: C6 06 A8 10 00                        mov startX, 0
[ 431]    1506: C6 06 A7 10 02                        mov startY, 2
[ 432]    150B: E8 05 FE                              call loopDraw           ; Redraw to screen after resetting lineLen, startX and startY
[ 433]    150E: E9 6C FE                              jmp scanForInput
[ 434]        :                                       
[ 435]    1511:                                       backSpaceCase:
[ 436]    1511: A2 C5 11                              mov asciiCode, al         ; Store ascii
[ 437]    1514: 33 DB                                 xor bx, bx
[ 438]    1516: 33 F6                                 xor si, si
[ 439]    1518: BB 00 0F                              mov bx, 3840
[ 440]    151B: E8 40 01                              call notSavedStatus
[ 441]    151E: 33 F6                                 xor si, si
[ 442]    1520: BB 46 0F                              mov bx, 3910
[ 443]    1523: E8 49 01                              call modeStatusInsert
[ 444]    1526: E8 5C 00                              call buffLocator
[ 445]    1529: 33 C0                                 xor ax, ax
[ 446]    152B: 33 DB                                 xor bx, bx
[ 447]    152D: 33 C9                                 xor cx, cx
[ 448]    152F: BF 07 01                              lea di, buff
[ 449]    1532: 03 3E C3 11                           add di, buffLoc           ; Points to where we want to move  everything
[ 450]    1536: BE 07 01                              lea si, buff
[ 451]    1539: 03 36 C3 11                           add si, buffLoc
[ 452]    153D: 46                                    inc si                    ; First byte to move
[ 453]    153E: 8B 0E 05 01                           mov cx, charAmount
[ 454]    1542: 8A 06 C3 11                           mov al, b.buffLoc
[ 455]    1546: 2B C8                                 sub cx, ax
[ 456]    1548: 49                                    dec cx                    ; Amount to move by
[ 457]    1549: B8 00 07                              mov ax, 00700h
[ 458]    154C: 8E C0                                 mov es, ax
[ 459]    154E: 8E D8                                 mov ds, ax
[ 460]    1550: FC                                    CLD                       ; Direction
[ 461]    1551: F3 A4                                 rep movsb
[ 462]    1553: 33 DB                                 xor bx, bx
[ 463]    1555: 33 C0                                 xor ax, ax
[ 464]    1557: 8B 1E 05 01                           mov bx, charAmount
[ 465]    155B: C6 87 06 01 00                        mov buff[bx-1], 0
[ 466]    1560: 33 F6                                 xor si, si
[ 467]    1562: B4 02                                 mov ah, 02h
[ 468]    1564: B6 02                                 mov dh, 2
[ 469]    1566: B2 00                                 mov dl, 0
[ 470]    1568: B7 00                                 mov bh, 0
[ 471]    156A: CD 10                                 int 10h
[ 472]    156C: FF 0E 05 01                           dec charAmount            ; Deleted, so decrease charAmount
[ 473]    1570: C6 06 A7 10 02                        mov startY, 2
[ 474]    1575: C6 06 A8 10 00                        mov startX, 0
[ 475]    157A: C6 06 C2 11 00                        mov lineLen, 0
[ 476]    157F: E8 91 FD                              call loopDraw             ; Redraw using values after reset for startY,X and lineLen
[ 477]    1582: E9 F8 FD                              jmp scanForInput
[ 478]        :                                       
[ 479]    1585:                                       buffLocator:
[ 480]    1585: 33 C0                                 xor ax, ax              ; Zero out
[ 481]    1587: 33 DB                                 xor bx, bx              ; Zero out
[ 482]    1589: 33 FF                                 xor di, di              ; Zero out
[ 483]    158B: B4 03                                 mov ah, 03h             ; Get cursor loc
[ 484]    158D: CD 10                                 int 10h                 ; Int
[ 485]        :                                       ;mov bl, 0               ; 0 out lower
[ 486]    158F: 8A DE                                 mov bl, dh              ; Dh has Y, move to bl
[ 487]    1591: B7 00                                 mov bh, 0               ; Zero out upper
[ 488]    1593: 8B FB                                 mov di, bx              ; Since we have to do indirect addressing, can't use BX, so use DI
[ 489]    1595: 4F                                    dec di
[ 490]    1596: 8A 85 5D 11                           mov al, distArray[di]   ;
[ 491]    159A: B4 00                                 mov ah, 0               ; Extend to 16 bit
[ 492]    159C: 02 C2                                 add al, dl              ; Answer in ax
[ 493]    159E: A3 C3 11                              mov buffLoc, ax
[ 494]    15A1: C3                                    ret
[ 495]        :                                       
[ 496]    15A2:                                       startEncrypt:
[ 497]    15A2: B4 02                                 mov ah, 02h             ; Cursor at start
[ 498]    15A4: 8A 36 CB 11                           mov dh, encrY
[ 499]    15A8: 8A 16 CA 11                           mov dl, encrX
[ 500]    15AC: B7 00                                 mov bh, 0
[ 501]    15AE: CD 10                                 int 10h
[ 502]    15B0: EB 00                                 jmp encrypt
[ 503]        :                                       
[ 504]    15B2:                                       encrypt:
[ 505]    15B2: 33 C0                                 xor ax, ax
[ 506]    15B4: B4 08                                 mov ah, 08h             ; Read character
[ 507]    15B6: B7 00                                 mov bh, 0               ; Page num
[ 508]    15B8: CD 10                                 int 10h                 ; Interrupt
[ 509]    15BA: 3C 0D                                 cmp al, 13              ; 13 CRET (end of line)
[ 510]    15BC: 74 4F                                 je updateEncrXY         ; Jump to next line vid mem
[ 511]        :                                       ;        cmp al, 32
[ 512]        :                                       ;        jmp cursorFix
[ 513]    15BE: 3C 00                                 cmp al , 0              ; If null (no more)
[ 514]    15C0: 74 59                                 je encrFinish           ; Done with encyrption
[ 515]    15C2: 3C 20                                 cmp al, 32
[ 516]    15C4: 7E 12                                 jle cursorFix
[ 517]    15C6: 3C 4E                                 cmp al, 78              ; Lesser half of Capital letters
[ 518]    15C8: 7C 19                                 jl addEncr              ; Encryption for lesser half of Capital Letters
[ 519]    15CA: 3C 5A                                 cmp al, 90              ; Upper half of CapitaL Letters
[ 520]    15CC: 7C 25                                 jl subEncr              ; Encryption for upper half of Capital Letters
[ 521]    15CE: 3C 6E                                 cmp al, 110             ; Lesser half of Lowercase Letters
[ 522]    15D0: 7C 11                                 jl addEncr              ; Encryption for lesser half of Lowercase Letters
[ 523]    15D2: 3C 7A                                 cmp al, 122             ; Upper half of Lowercase Letters
[ 524]    15D4: 7C 1D                                 jl subEncr              ; Encryption for upper half of Lowercase Letters
[ 525]    15D6: EB DA                                 jmp encrypt
[ 526]        :                                       
[ 527]    15D8:                                       cursorFix:
[ 528]    15D8: B4 02                                 mov ah, 02h             ; Set cursor position
[ 529]    15DA: 80 C2 01                              add dl, 1               ; Move by 1
[ 530]    15DD: B7 00                                 mov bh, 0               ; Page number
[ 531]    15DF: CD 10                                 int 10h
[ 532]    15E1: EB CF                                 jmp encrypt
[ 533]        :                                       
[ 534]    15E3:                                       addEncr:
[ 535]    15E3: 04 0D                                 add al, 13              ; Add 13 to encrypt
[ 536]    15E5: B4 0A                                 mov ah, 0Ah             ; Write char only
[ 537]    15E7: B7 00                                 mov bh, 0               ; Page number
[ 538]    15E9: B9 01 00                              mov cx, 1               ; Once
[ 539]    15EC: CD 10                                 int 10h                ; Interrupt
[ 540]    15EE: E8 12 00                              call moveCursor         ; call function
[ 541]    15F1: EB BF                                 jmp encrypt             ; jump back encrypt
[ 542]    15F3:                                       subEncr:
[ 543]    15F3: 2C 0D                                 sub al, 13              ; Sub 13 to encrypt
[ 544]    15F5: B4 0A                                 mov ah, 0Ah
[ 545]    15F7: B7 00                                 mov bh, 0
[ 546]    15F9: B9 01 00                              mov cx, 1
[ 547]    15FC: CD 10                                 int 10h
[ 548]    15FE: E8 02 00                              call moveCursor
[ 549]    1601: EB AF                                 jmp encrypt
[ 550]        :                                       
[ 551]    1603:                                       moveCursor:
[ 552]    1603: B4 02                                 mov ah, 02h             ; Set cursor position
[ 553]    1605: 80 C2 01                              add dl, 1               ; Move by 1
[ 554]    1608: B7 00                                 mov bh, 0               ; Page number
[ 555]    160A: CD 10                                 int 10h
[ 556]    160C: C3                                    ret
[ 557]        :                                       
[ 558]    160D:                                       updateEncrXY:
[ 559]    160D: FE 06 CB 11                           inc encrY               ; Y+1
[ 560]    1611: C6 06 CA 11 00                        mov encrX, 0            ; X=0
[ 561]    1616: E8 89 FF                              call startEncrypt
[ 562]    1619: EB 97                                 jmp encrypt
[ 563]        :                                       
[ 564]    161B:                                       encrFinish:                ; Reset the cursor after encryption
[ 565]    161B: C6 06 CB 11 02                        mov encrY, 2
[ 566]    1620: C6 06 CA 11 00                        mov encrX, 0
[ 567]    1625: B4 02                                 mov ah, 02h
[ 568]    1627: B6 02                                 mov dh, 2
[ 569]    1629: B2 00                                 mov dl, 0
[ 570]    162B: B7 00                                 mov bh, 0
[ 571]    162D: CD 10                                 int 10h
[ 572]    162F: E9 4B FD                              jmp scanForInput
[ 573]        :                                       
[ 574]    1632:                                       fontColor:                   ; Function to change colors
[ 575]    1632: 33 DB                                 xor bx, bx
[ 576]    1634: 80 06 08 12 02                        add colIndex, 2          ; Add 2 since word array
[ 577]    1639: 80 3E 08 12 0E                        cmp colIndex, 14         ; compare with length
[ 578]    163E: 7F 17                                 jg  resetIndex
[ 579]    1640: 8A 1E 08 12                           mov bl, colIndex         ; Bl has colIndex for array
[ 580]    1644: B7 00                                 mov bh, 0                ; Extend to 8 bits
[ 581]    1646: 8B 87 CC 11                           mov ax, colorArray[bx]   ; Color in array
[ 582]    164A: A3 06 12                              mov color, ax            ; Set color in ax
[ 583]    164D: 33 C9                                 xor cx, cx               ; Setting values for color status
[ 584]    164F: BB 78 0F                              mov bx, 3960
[ 585]    1652: EB 3D                                 jmp displayColor
[ 586]    1654: E9 26 FD                              jmp scanForInput
[ 587]        :                                       
[ 588]    1657:                                       resetIndex:
[ 589]    1657: C6 06 08 12 FE                        mov colIndex, -2         ; Just resets the index when reached highest number
[ 590]    165C: EB D4                                 jmp fontColor
[ 591]        :                                       
[ 592]    165E:                                       notSavedStatus:                  ; Prints the not saved status
[ 593]    165E: 8A 84 FC 10                           mov al, savedStringOne[si]
[ 594]    1662: 26 88 07                              mov byte ptr es: [bx], al
[ 595]    1665: 83 C3 02                              add bx, 2
[ 596]    1668: 46                                    inc si
[ 597]    1669: 83 FE 0C                              cmp si, 12
[ 598]    166C: 7C F0                                 jl notSavedStatus
[ 599]    166E: C3                                    ret
[ 600]        :                                       
[ 601]    166F:                                       modeStatusInsert:                ; Prints the Insert mode status
[ 602]    166F: 8A 84 3C 11                           mov al, modeInsertString[si]
[ 603]    1673: 26 88 07                              mov byte ptr es: [bx], al
[ 604]    1676: 83 C3 02                              add bx, 2
[ 605]    1679: 46                                    inc si
[ 606]    167A: 83 FE 13                              cmp si, 19
[ 607]    167D: 7C F0                                 jl modeStatusInsert
[ 608]    167F: C3                                    ret
[ 609]        :                                       
[ 610]    1680:                                       modeStatusOverType:                ; Prints the overtype mode status
[ 611]    1680: 8A 84 2A 11                           mov al, modeOverTypeString[si]
[ 612]    1684: 26 88 07                              mov byte ptr es: [bx], al
[ 613]    1687: 83 C3 02                              add bx, 2
[ 614]    168A: 46                                    inc si
[ 615]    168B: 83 FE 13                              cmp si, 19
[ 616]    168E: 7C F0                                 jl modeStatusOverType
[ 617]    1690: C3                                    ret
[ 618]        :                                       
[ 619]    1691:                                       displayColor:                   ; Attempt to display color mode at bottom of screen
[ 620]    1691: 83 3E 04 12 2A                        cmp colorIndex, 42
[ 621]    1696: 74 1B                                 je colorIndexReset
[ 622]    1698: 8B 36 04 12                           mov si, colorIndex
[ 623]    169C: 8A 84 DA 11                           mov al, colorArrayString[si]
[ 624]    16A0: 26 88 07                              mov ptr es: [bx], al
[ 625]    16A3: 83 C3 02                              add bx, 2
[ 626]    16A6: FF 06 04 12                           inc colorIndex
[ 627]    16AA: 41                                    inc cx
[ 628]    16AB: 83 F9 06                              cmp cx, 6
[ 629]    16AE: 7C E1                                 jl displayColor
[ 630]    16B0: E9 CA FC                              jmp scanForInput
[ 631]    16B3:                                       colorIndexReset:               ; Reset value
[ 632]    16B3: C7 06 04 12 00 00                     mov colorIndex, 0
[ 633]    16B9: EB D6                                 jmp displayColor
[ 634]        :                                       
[ 635]    16BB:                                       saveFile:
[ 636]    16BB: 8C C8                                 mov ax, @data
[ 637]    16BD: 8E D8                                 mov ds, ax
[ 638]        :                                       ;********OPEN FILE*********
[ 639]    16BF: B4 3D                                 mov ah, 3Dh             ; Open existing file
[ 640]    16C1: B0 01                                 mov al, 1               ; Read mode
[ 641]    16C3: BA 82 00                              mov dx, 82h             ; offset of string
[ 642]    16C6: CD 21                                 int 21h                 ; Interrupt call
[ 643]    16C8: 72 42                                 jc exit                  ; CF set, jmp
[ 644]    16CA: A3 03 01                              mov inHandle, ax        ; save handler
[ 645]        :                                       
[ 646]        :                                       ;********WRITE TO FILE********
[ 647]    16CD: B4 40                                 mov ah, 40h             ; Write to file
[ 648]    16CF: 8B 1E 03 01                           mov bx, inHandle        ; Handler
[ 649]    16D3: 33 C9                                 xor cx, cx
[ 650]    16D5: 8B 0E 05 01                           mov cx, charAmount      ; Amount to write
[ 651]    16D9: BA 07 01                              lea dx, buff            ; Give DX address of buffer
[ 652]    16DC: CD 21                                 int 21h
[ 653]    16DE: 72 2C                                 jc exit                 ; Error jump out
[ 654]        :                                       
[ 655]        :                                       ;***Close File*****
[ 656]    16E0: B4 3E                                 mov ah, 3Eh             ; Close file
[ 657]    16E2: 8B 1E 03 01                           mov bx, inHandle
[ 658]    16E6: CD 21                                 int 21h
[ 659]        :                                       
[ 660]    16E8: BB 00 0F                              mov bx, 3840
[ 661]    16EB: 33 F6                                 xor si, si
[ 662]    16ED: B8 00 B8                              mov ax, 0B800h
[ 663]    16F0: 8E C0                                 mov es, ax
[ 664]    16F2:                                       savedStatus:                    ; Displays you saved file
[ 665]    16F2: 8A 84 08 11                           mov al, savedStringTwo[si]
[ 666]    16F6: 26 88 07                              mov byte ptr es: [bx], al
[ 667]    16F9: 83 C3 02                              add bx, 2
[ 668]    16FC: 46                                    inc si
[ 669]    16FD: 83 FE 0C                              cmp si, 12
[ 670]    1700: 7C F0                                 jl savedStatus
[ 671]    1702: BB 10 0F                              mov bx, 3856                    ; Check mark for saved
[ 672]    1705: 26 C6 07 FB                           mov byte ptr es: [bx], 251
[ 673]    1709: E9 71 FC                              jmp scanForInput
[ 674]        :                                       
[ 675]    170C: 90                                    exit: nop
[ 676]        :                                       
[ 677]        :                                       end start
[ 678]        :                                       
[ 679]        :                                       
[ 680]        :                                       
[ 681]        :                                       
[ 682]        :                                       
[ 683]        :                                       
 
===================================================================================================
 




===================================================================================================
